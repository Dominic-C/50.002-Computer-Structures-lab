.include"/home/dominic/Documents/school/50002/nominal.jsim"
.include"/home/dominic/Documents/school/50002/stdcell.jsim"
*.include"/home/dominic/Documents/school/50002/lab3adder.jsim"
*.include"/home/dominic/Documents/school/50002/lab3compare.jsim"
.include"/home/dominic/Documents/school/50002/lab3boolean.jsim"
******************* 1 bit ADDER *************************
.subckt FA a b ci s co
X_first_Sum a b 5 xor2
X_Sum 5 ci s xor2
XfirstNand a b 1 nand2
XsecondNand a ci 2 nand2
XthirdNand b ci 3 nand2
XfinalNand 1 2 3 co nand3
.ends

********************* Zero Flag **********************
.subckt zeroFlag a[31:0] output
// take 32 inputs, use 8 or4 gates to reduce them to 8 outputs
X_firstLayer a[0:7] a[8:15] a[16:23] a[24:31] z[0:7] or4

// have 8 outputs, reduce to 2 by using 2 or4 gates
X_secondLayer z[0:1] z[2:3] z[4:5] z[6:7] w[0:1] or4

X_finalValue w0 w1 output nor2
.ends

****************** Overflow Flag ******************
.subckt overflowFlag a xb s z
* invert necessary values
XsInv s sInv inverter
XaInv a aInv inverter
XxbInv xb xbInv inverter
* and3 gates
Xand3_1 a xb sInv z1 and3
Xand3_2 aInv xbInv s z2 and3
X_output z1 z2 z or2
.ends

**********************32 bit Adder *******************
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
* adder *
Xxor_32 B[31:0] ALUFN[0]#32 XB[31:0] xor2
Xstart A[0] XB[0] ALUFN[0] s[0] cout[0] FA
Xmiddle A[1:31] XB[1:31] cout[0:30] s[1:31] cout[1:31] FA

* flags *
X_ZeroFlag s[31:0] z zeroFlag // calling zero flag subckt
X_overflowFlag a31 XB31 s31 v overflowFlag
.connect s31 n // if a number is negative, it will be padded with 1's on the left
.ends

********************* 32 bit compare *****************
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
.connect cmp[31:1] 0 
X_cmplt n v cmplt xor2
X_cmplteq z cmplt cmplteq or2
Xcmp ALUFN[2] ALUFN[1] 0 cmplt z cmplteq cmp[0] mux4
.ends

******************* 32 bit boolean ********************
.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
X_bool A[31:0] B[31:0] ALUFN[0]#32 ALUFN[1]#32 ALUFN[2]#32 ALUFN[3]#32 boole[31:0] mux4
.ends